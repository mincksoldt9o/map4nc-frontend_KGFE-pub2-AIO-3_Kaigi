diff --git a/src/containers/pages/Plan/Careplan/Kaigi/KaigiEditForm.tsx b/src/containers/pages/Plan/Careplan/Kaigi/KaigiEditForm.tsx
index eaa00d2..5aa9d8f 100644
--- a/src/containers/pages/Plan/Careplan/Kaigi/KaigiEditForm.tsx
+++ b/src/containers/pages/Plan/Careplan/Kaigi/KaigiEditForm.tsx
@@ -13,6 +13,7 @@ import useClearKaigi from '@my/action-hooks/plan/careplan/kaigi/useClearKaigi';
 import { Container } from '@material-ui/core';
 import GlobalMessagePanel from '@my/containers/organisms/GlobalMessagePanel';
 import KaigiInputForm, { KaigiInputFormType } from './KaigiInputForm';
+import useFetchPastShussikisha from '@my/action-hooks/plan/careplan/kaigi/useFetchPastShussikisha';
 
 type Props = {
   id: string;
@@ -26,6 +27,7 @@ const KaigiEditForm: React.FC<Props> = (props: Props) => {
 
   const fetchKaigi = useFetchKaigi(screenIDs.L1240_01.id); // GET 
   const putKaigi = usePutKaigi(screenIDs.L1240_01.id); // UPDATE = GET + PUT
+  const fetchPastShussikisha = useFetchPastShussikisha(screenIDs.L1240_01.id); // GET
 
   const clearCareplanHeader = useClearCareplanHeader();
   const clearKaigi = useClearKaigi();
@@ -103,12 +105,24 @@ const KaigiEditForm: React.FC<Props> = (props: Props) => {
 
   const notLoaded = loadingStatus !== 'Loaded';
 
-  // 居宅サービス計画書(1)取得
-  React.useEffect(
-    UseEffectAsync.make(async () => {
+  // React.useEffect(
+  //   UseEffectAsync.make(async () => {
+  //     if (notLoaded) {
+  //       await fetchKaigi(
+  //         selectedPlanKeikakushoKanri?.info?.officeServiceKindSeq || 0,
+  //         selectedPlanKeikakushoKanri?.info?.riyoushaSeq || 0,
+  //         selectedPlanKeikakushoKanri?.info?.keikakushoShubetsu || '',
+  //         selectedPlanKeikakushoKanri?.info?.keikakushoSeq || 0
+  //       );
+  //     }
+  //   }),
+  //   [fetchKaigi, selectedPlanKeikakushoKanri, riyoushaSeq, notLoaded]
+  // );
+
+  // Get key points
+  React. useEffect(
+    UseEffectAsync. make(async () => {
       if (notLoaded) {
-        // console.log('居宅サービス計画書(1)取得');
-        //        await fetchKaigi(selectedPlanKeikakushoKanri?.info?.officeServiceKindSeq || 0, riyoushaSeq, selectedPlanKeikakushoKanri?.info?.keikakushoSeq || 0);
         await fetchKaigi(
           selectedPlanKeikakushoKanri?.info?.officeServiceKindSeq || 0,
           selectedPlanKeikakushoKanri?.info?.riyoushaSeq || 0,
@@ -120,6 +134,20 @@ const KaigiEditForm: React.FC<Props> = (props: Props) => {
     [fetchKaigi, selectedPlanKeikakushoKanri, riyoushaSeq, notLoaded]
   );
 
+
+    // Get past shussikisha 
+    React. useEffect(
+      UseEffectAsync. make(async () => {
+        if (notLoaded) {
+          await fetchPastShussikisha(
+            selectedPlanKeikakushoKanri?.info?.riyoushaSeq || 0,
+          );
+        }
+      }),
+      [fetchPastShussikisha, selectedPlanKeikakushoKanri, riyoushaSeq, notLoaded]
+    );
+
+
   // debug onSubmit simple function
   // const onSubmit = async (data: KaigiInputFormType) => {
   //     // eslint-disable-next-line no-console
diff --git a/src/containers/pages/Plan/Careplan/Kaigi/ShussekishaInyou/ShussekishaInyou.tsx b/src/containers/pages/Plan/Careplan/Kaigi/ShussekishaInyou/ShussekishaInyou.tsx
index 2ac6156..d41e2ae 100644
--- a/src/containers/pages/Plan/Careplan/Kaigi/ShussekishaInyou/ShussekishaInyou.tsx
+++ b/src/containers/pages/Plan/Careplan/Kaigi/ShussekishaInyou/ShussekishaInyou.tsx
@@ -7,208 +7,23 @@ import Label from '@my/components/atomic/Label';
 import RadioButton from '@my/components/atomic/RadioButton';
 import GeneralIconButton from '@my/components/molecules/GeneralIconButton';
 import { TextColumnFilter } from '@my/components/molecules/DataGrid/filters';
+import { PastShussekisha } from 'maps4nc-frontend-web-api/dist/lib/model';
+import { RootState, useTypedSelector } from '@my/stores';
 
 type Props = {
   setIsDialogOpen: React.Dispatch<React.SetStateAction<boolean>>;
 };
 
-export type DataGridColumnData = EditableGridData & {
-  shozoku: string;
-  name: string;
-};
+// export type GridColumnData = EditableGridData & {
+//   shozoku: string;
+//   name: string;
+// };
+
+// define type of columns 
+export type GridColumnData = EditableGridData & PastShussekisha;
 
-//###### implementation manually testing
-// ## Grid component
-// function Grid() {
-//   const [rows, setRows] = useState([
-//     {
-//       checked: false,
-//       occupation: "Doctor",
-//       familyName: "Smith"
-//     },
-//     {
-//       checked: false,
-//       occupation: "Teacher",
-//       familyName: "Johnson"
-//     },
-//     {
-//       checked: false,
-//       occupation: "Engineer",
-//       familyName: "Williams"
-//     },
-//     {
-//       checked: false,
-//       occupation: "Artist",
-//       familyName: "Brown"
-//     }
-//   ]);
-
-// useState hook mark
-
-// experiment manually create grid component for testing 01
-// return statement of Grid component
-//   return (
-//     <table>
-//       <thead>
-//         <tr>
-//           <th>
-//             <input
-//               type="checkbox"
-//               onChange={() => handleCheckAll()}
-//             />
-//           </th>
-//           <th>
-//             Occupation
-//             <button onClick={() => handleFilterChange}>Filter</button>
-//             <input
-//               type="text"
-//               name="occupation"
-//               value={filters.occupation}
-//               onChange={handleFilterChange}
-//             />
-//           </th>
-//           <th>
-//             Family Name
-//             <button onClick={() => handleFilterChange}>Filter</button>
-//             <input
-//               type="text"
-//               name="familyName"
-//               value={filters.familyName}
-//               onChange={handleFilterChange}
-//             />
-//           </th>
-//         </tr>
-//       </thead>
-//       <tbody>
-//         {filteredRows.map((row, index) => (
-//           <tr key={index}>
-//             <td>
-//               <input
-//                 type="checkbox"
-//                 checked={row.checked}
-//                 onChange={() => handleCheckboxChange(index)}
-//               />
-//             </td>
-//             <td>{row.occupation}</td>
-//             <td>{row.familyName}</td>
-//           </tr>
-//         ))}
-//       </tbody>
-//     </table>
-//   );
-// }
-
-// experiment manually create grid component for testing 02
-//   return (
-//     <div>
-//       <Header>
-//         <div>
-//           <input
-//             type="radio"
-//             name="selection"
-//             value="user"
-//             checked={selected === "user"}
-//             onChange={handleSelection}
-//           />
-//           Select User
-//           <input
-//             type="radio"
-//             name="selection"
-//             value="loginedStaff"
-//             checked={selected === "loginedStaff"}
-//             onChange={handleSelection}
-//           />
-//           Select Logined Staff
-//         </div>
-//         <button onClick={handleCloseButton}>Close</button>
-//       </Header>
-//       <Body>
-//         <div>
-//           <table>
-//             <thead>
-//               <tr>
-//                 <th>
-//                   <input
-//                     type="checkbox"
-//                     onChange={() => handleCheckAll()}
-//                   />
-//                 </th>
-//                 <th>
-//                   Occupation
-//                   <button onClick={() => handleFilterChange}>Filter</button>
-//                   <input
-//                     type="text"
-//                     name="occupation"
-//                     value={filters.occupation}
-//                     onChange={handleFilterChange}
-//                   />
-//                 </th>
-//                 <th>
-//                   Family Name
-//                   <button onClick={() => handle
-//                   <button onClick={() => handleFilterChange}>Filter</button>
-//                   <input
-//                     type="text"
-//                     name="familyName"
-//                     value={filters.familyName}
-//                     onChange={handleFilterChange}
-//                   />
-//                 </th>
-//               </tr>
-//             </thead>
-//             <tbody>
-//               {leftGrid.map((row, index) => (
-//                 <tr key={index}>
-//                   <td>
-//                     <input
-//                       type="checkbox"
-//                       checked={row.checked}
-//                       onChange={() => handleCheckboxChange(index)}
-//                     />
-//                   </td>
-//                   <td>{row.occupation}</td>
-//                   <td>{row.familyName}</td>
-//                 </tr>
-//               ))}
-//             </tbody>
-//           </table>
-//         </div>
-//         <button onClick={handleClickMove}>Move</button>
-//         <div>
-//           <table>
-//             <thead>
-//               <tr>
-//                 <th>Drag Icon</th>
-//                 <th>Occupation</th>
-//                 <th>Family Name</th>
-//                 <th>Delete Row</th>
-//               </tr>
-//             </thead>
-//             <tbody>
-//               {rightGrid.map((row, index) => (
-//                 <tr key={index}>
-//                   <td>Drag Icon</td>
-//                   <td>{row.occupation}</td>
-//                   <td>{row.familyName}</td>
-//                   <td>
-//                     <button onClick={() => handleDeleteRow(index)}>
-//                       Delete
-//                     </button>
-//                   </td>
-//                 </tr>
-//               ))}
-//             </tbody>
-//           </table>
-//         </div>
-//       </Body>
-//       <Footer>
-//         <button onClick={handleSave}>Save</button>
-//       </Footer>
-//     </div>
-//   );
-// }
-
-//######
+
+const defaultSelectedRows = { '0': true };
 
 
 function setIsDialogOpen(arg0: boolean) {
@@ -219,140 +34,152 @@ function setIsDialogOpen(arg0: boolean) {
 const ShussekishaInyou: React.FC<Props> = (props: Props) => {
   const { setIsDialogOpen } = props;
 
-  // function MoveDataBetweenTwoGrids() {
-  // init state
-  const [leftGrid, setLeftGrid] = useState([
-    {
-      checked: false,
-      occupation: 'Doctor',
-      familyName: 'Smith',
-    },
-    {
-      checked: false,
-      occupation: 'Teacher',
-      familyName: 'Johnson',
-    },
-    {
-      checked: false,
-      occupation: 'Engineer',
-      familyName: 'Williams',
-    },
-    {
-      checked: false,
-      occupation: 'Artist',
-      familyName: 'Brown',
-    },
-  ]);
+  //TODO: using useTypedSelector to get data form RootState like in KaigiEditForm 
 
-  // const [rightGrid, setRightGrid] = useState([]);
-  const [rightGrid, setRightGrid] = useState<Array<{ occupation: string; familyName: string }>>([]);
+  // const riyoushaKihon = useTypedSelector((state: RootState) => state.kaigi.riyoushaKihon);
 
-  const [filters, setFilters] = useState({
-    occupation: '',
-    familyName: '',
-  });
+  // const kaigiData = useTypedSelector((state: RootState) => state.kaigi.planServiseTantoushaKaigi);
+  
+  // console.log('kaigiData form KaigiEditForm: ', kaigiData);
 
-  const [selected, setSelected] = useState('');
-  const [users, setUsers] = useState([]);
-  const [loginedStaff, setLoginedStaff] = useState([]);
-  // implement function handleFilterChange
-  function handleFilterChange(e: { target: { name: any; value: any } }) {
-    const { name, value } = e.target;
-    setFilters((prevFilters) => ({ ...prevFilters, [name]: value }));
-  }
+  // const loadingStatus = useTypedSelector((state: RootState) => state.kaigi.loadingStatus);
 
-  // implement function handleCheckboxChange
-  function handleCheckboxChange(index: number) {
-    setLeftGrid((prevLeftGrid) =>
-      prevLeftGrid.map((row, i) => {
-        if (i === index) {
-          return { ...row, checked: !row.checked };
-        }
-        return row;
-      })
-    );
-  }
+  // // debug
+  // const selectedPlanKeikakushoKanri = useTypedSelector((state: RootState) => state.careplanHeader.selectedPlanKeikakushoKanri);
+  // console.log('selectedPlanKeikakushoKanri: ', selectedPlanKeikakushoKanri);
+  // console.log(
+  //   'RootState-careplanHeader: ',
+  //   useTypedSelector((state: RootState) => state.careplanHeader)
+  // );
 
-  // implement function handleCheckAll
-  function handleCheckAll() {
-    setLeftGrid((prevLeftGrid) => prevLeftGrid.map((row) => ({ ...row, checked: true })));
-  }
 
-  // implement function handleUncheckAll
-  function handleUncheckAll() {
-    setLeftGrid((prevLeftGrid) => prevLeftGrid.map((row) => ({ ...row, checked: false })));
-  }
-  // implement function filterRows
-  function filterRows() {
-    return leftGrid.filter((row) => {
-      return row.occupation.includes(filters.occupation) && row.familyName.includes(filters.familyName);
-    });
-  }
 
-  // implement function handleClickMove
-  // function handleClickMove() {
-  //   const filteredRows = filterRows();
-  //   setLeftGrid(prevLeftGrid =>
-  //     prevLeftGrid.filter(row => !filteredRows.includes(row))
-  //   );
-  //   setRightGrid(prevRightGrid => [...prevRightGrid, ...filteredRows]);
-  // }
+  /** Processing when the close button is clicked DD*/
+  const handleClickReturn = () => {
+    console.log('close button pressed');
+    setIsDialogOpen(false);
+  };
+
+    /** Processing when the OK button is clicked DD*/
+    const handleClickDecision = () => {
+      console.log('Confirm button pressed');
+      setIsDialogOpen(false);
+    };
 
   function handleClickMove() {
     // const filteredRows = filterRows();
-    const filteredRows: Array<{ occupation: string; familyName: string }> = filterRows();
-    setLeftGrid((prevLeftGrid) => prevLeftGrid.filter((row) => !filteredRows.includes(row)));
-    setRightGrid((prevRightGrid) => [
-      ...prevRightGrid,
-      ...filteredRows.map((row) => ({
-        occupation: row.occupation,
-        familyName: row.familyName,
-      })),
-    ]);
-  }
-
-  // implement function handleSelection
-  function handleSelection(e: { target: { value: any } }) {
-    const { value } = e.target;
-    setSelected(value);
-    if (value === 'user') {
-      // load users here
-    } else if (value === 'loginedStaff') {
-      // load logined staff here
-    }
-  }
-
-  //   function handleCloseButton() {
-  //     // close the Dialog here
-  //   }
-
-  function handleSave() {
-    // save the state of the grids here
-    // Save the state of the left and right grids
-    // For example, you could make an API call to save the data to a database
-    const leftGridData = leftGrid.map((row) => ({
-      occupation: row.occupation,
-      familyName: row.familyName,
-    }));
-    const rightGridData = rightGrid.map((row) => ({
-      occupation: row.occupation,
-      familyName: row.familyName,
-    }));
-    console.log('Saving left grid data:', leftGridData);
-    console.log('Saving right grid data:', rightGridData);
-
-    // Close the Dialog component
-    setIsDialogOpen(false);
+    //const filteredRows: Array<{ occupation: string; familyName: string }> = filterRows();
+    // setLeftGrid((prevLeftGrid) => prevLeftGrid.filter((row) => !filteredRows.includes(row)));
+    // setRightGrid((prevRightGrid) => [
+    //   ...prevRightGrid,
+    //   ...filteredRows.map((row) => ({
+    //     occupation: row.occupation,
+    //     familyName: row.familyName,
+    //   })),
+    // ]);
   }
 
-  // implement function handleDeleteRow
-  function handleDeleteRow(index: number) {
-    // Delete the row at the specified index from the right grid
-    setRightGrid((prevRightGrid) => prevRightGrid.filter((row, i) => i !== index));
-  }
-
-  const kakoShussekishaColumns: DataGridColumn<DataGridColumnData>[] = React.useMemo(
-    (): DataGridColumn<DataGridColumnData>[] => [
+  // use useMemo to auto update GridData for both leftGrid and rightGrid : PastShussekisha
+
+  //   const ikkatsuPrintList = useTypedSelector((state: RootState) => state.kaigoPrint.ikkatsuPrintList);
+
+  // const gridData: ColumnDataOffice[] = React.useMemo((): ColumnDataOffice[] => {
+  //   return ikkatsuPrintList.map((od) => {
+  //     return {
+  //       ...od,
+  //     };
+  //   });
+  // }, [ikkatsuPrintList]);
+
+//   const pastShussekishaArray = useTypedSelector(
+//   //(state: RootState) => state.kaigi.planServiseTantoushaKaigi.*
+// );
+
+// export default (app: Express) => {
+//   // for Kagi GET - POST - PUT
+//   Routes.L124002CareplanKaigiUpdateRoute.getCareplanOfficeServiceKindSeqRiyoushaSeqKaigiKeikakushoShubetsuKeikakushoSeq(app, (res, params) => {
+//     res.json(sampleDataGet);
+//   });
+//   Routes.L124001CareplanKaigiRegisterRoute.postCareplanOfficeServiceKindSeqRiyoushaSeqKaigiKeikakushoShubetsu(app, (res, params) => {
+//     res.json(sampleDataPost);
+//   });
+//   Routes.L124002CareplanKaigiUpdateRoute.putCareplanOfficeServiceKindSeqRiyoushaSeqKaigiKeikakushoShubetsuKeikakushoSeq(app, (res, params) => {
+//     res.status(200).send();
+//   });
+//   // for PastShussekisha GET
+//   Routes.L124004CareplanKaigiPastShussekishaListRoute.getCareplanKaigiPastShussekishaKind(app, (res, params) => {
+//     res.json(sampleDataGetPastShussekisha);
+//   });
+
+// };
+
+
+//## kaigi Store-Slcie: [[KGFE-action-proc-insight - RootState - KaigiStore-json-data RootStore-Slice MOC]]
+
+  // kaigi: {
+  //   planServiseTantoushaKaigi: {
+  //     officeSeq: 1,
+  //     officeServiceKindSeq: 1,
+  //     riyoushaSeq: 1,
+  //     keikakushoShubetsu: 'keikakushoShubetsu',
+  //     keikakushoSeq: 1,
+  //     kaisaiDate: 1670544000000,
+  //     kaisaiBasho: 'kaisaiBasho',
+  //     kaisaiJikan: 'kaisaiJikan',
+  //     kaisaiKaisuu: 1,
+  //     shozoku1: 'shozoku1',
+  //     name1: 'name1',
+  //     shozoku2: 'shozoku2',
+  //     name2: 'name2',
+  //     shozoku3: 'shozoku3',
+  //     name3: 'name3',
+  //     shozoku4: 'shozoku4',
+  //     name4: 'name4',
+  //     shozoku5: 'shozoku5',
+  //     name5: 'name5',
+  //     shozoku6: 'shozoku6',
+  //     name6: 'name6',
+  //     shozoku7: 'shozoku7',
+  //     name7: 'name7',
+  //     shozoku8: 'shozoku8',
+  //     name8: 'name8',
+  //     shozoku9: 'shozoku9',
+  //     name9: 'name9',
+  //     shussekiHonnin: 'shussekiHonnin',
+  //     shussekiKazoku: 'shussekiKazoku',
+  //     shussekiTsuzukigara: 'shussekiTsuzukigara',
+  //     shussekiBikou: 'shussekiBikou',
+  //     kentouKoumoku: 'kentouKoumoku',
+  //     kentouNaiyou: 'kentouNaiyou',
+  //     ketsuron: 'ketsuron',
+  //     kadai: 'kadai',
+  //     updateAt: 1673141300389
+  //   },
+  //   youkaigodoList: [],
+  //   loadingStatus: 'Loaded',
+  //   loadingRiyoushaKihonStatus: 'NotLoad',
+  //   loadingYoukaigodoListStatus: 'NotLoad',
+  //   isDirty: false
+  // },
+  
+
+
+  // const gridData: GridColumnData[] = React.useMemo((): GridColumnData[] => {
+  //   return ikkatsuPrintList.map((od) => {
+  //     return {
+  //       ...od,
+  //     };
+  //   });
+  // }, [ikkatsuPrintList]);
+
+
+
+
+  // 
+  // for leftGrid: Columns vs Data vs Values
+
+  const kakoShussekishaColumns: DataGridColumn<GridColumnData>[] = React.useMemo(
+    (): DataGridColumn<GridColumnData>[] => [
       {
         Header: '所属(職種)',
         accessor: 'shozoku',
@@ -373,8 +200,29 @@ const ShussekishaInyou: React.FC<Props> = (props: Props) => {
     []
   );
 
-  const inyouShussekishaColumns: DataGridColumn<DataGridColumnData>[] = React.useMemo(
-    (): DataGridColumn<DataGridColumnData>[] => [
+// ### using useState to prepare var-setVar-pairs for Data of both Grids : dynamically
+//const [kakoShussekishaData, setkakoShussekishaData] = React.useState<GridColumnData[]>();
+
+// ### or useMemo to return pre-defined object : statically
+const kakoShussekishaData: GridColumnData[] = React.useMemo((): GridColumnData[] => {
+    return [
+      { shozoku: 'B訪問介護事業所', name: 'ヘルパー　太郎' },
+      { shozoku: 'C福祉用具貸与事業所', name: '福祉用具　二郎' },
+      { shozoku: 'A居宅介護支援事業所', name: 'ケアマネ　花子' },
+      { shozoku: 'X病院', name: '医師　進' },
+    ];
+  }, []);
+
+  const kakoShussekishaDataGridValues = useEditableDataGrid<GridColumnData>({
+    defaultData: kakoShussekishaData,
+    rowSelect: 'multiple',
+  });
+
+
+  // for rightGrid: Columns vs Data vs Values
+
+  const inyouShussekishaColumns: DataGridColumn<GridColumnData>[] = React.useMemo(
+    (): DataGridColumn<GridColumnData>[] => [
       {
         Header: '所属(職種)',
         accessor: 'shozoku',
@@ -393,16 +241,8 @@ const ShussekishaInyou: React.FC<Props> = (props: Props) => {
     []
   );
 
-  const kakoShussekishaData: DataGridColumnData[] = React.useMemo((): DataGridColumnData[] => {
-    return [
-      { shozoku: 'B訪問介護事業所', name: 'ヘルパー　太郎' },
-      { shozoku: 'C福祉用具貸与事業所', name: '福祉用具　二郎' },
-      { shozoku: 'A居宅介護支援事業所', name: 'ケアマネ　花子' },
-      { shozoku: 'X病院', name: '医師　進' },
-    ];
-  }, []);
 
-  const inyouShussekishaData: DataGridColumnData[] = React.useMemo((): DataGridColumnData[] => {
+  const inyouShussekishaData: GridColumnData[] = React.useMemo((): GridColumnData[] => {
     return [
       { shozoku: 'C福祉用具貸与事業所', name: '福祉用具　二郎' },
       { shozoku: 'X病院', name: '医師　進' },
@@ -410,43 +250,32 @@ const ShussekishaInyou: React.FC<Props> = (props: Props) => {
     ];
   }, []);
 
-  const kakoShussekishaDataGridValues = useEditableDataGrid<DataGridColumnData>({
-    defaultData: kakoShussekishaData,
-    rowSelect: 'multiple',
-  });
-  const inyouShussekishaDataGridValues = useEditableDataGrid<DataGridColumnData>({
+  const inyouShussekishaDataGridValues = useEditableDataGrid<GridColumnData>({
     defaultData: inyouShussekishaData,
     draggable: true,
   });
 
-  /** Processing when the close button is clicked DD*/
-  const handleClickReturn = () => {
-    console.log('close button pressed');
-    setIsDialogOpen(false);
-  };
+//## handlers 
+//### 1.3 for rightGrid: handleClickDelete
+  const { remove } = inyouShussekishaDataGridValues;
+
+  const handleClickDelete = React.useCallback(
+    (rowIndex: number) => {
+      remove(rowIndex);
+      console.log("kakoShussekishaDataGridValues: ",kakoShussekishaDataGridValues);
+      console.log("inyouShussekishaDataGridValues: ",inyouShussekishaDataGridValues);
+      console.log("kakoShussekishaData: ",kakoShussekishaData);
+      console.log("inyouShussekishaData: ",inyouShussekishaData);
+    },
+    [remove]
+  );
+
 
-  /** Processing when the move button is clicked */
-  // const handleClickMove = () => {
-  //   console.log('move button pressed');
-  // };
 
-  /** Processing when the delete button is clicked */
-  // const handleClickDelete = () => {
-  //   console.log('press delete button');
-  // };
 
-  function handleClickDelete(index: number) {
-    console.log('press delete button');
-    // Delete the row at the specified index from the right grid
-    setRightGrid((prevRightGrid) => prevRightGrid.filter((row, i) => i !== index));
-  }
 
-  /** Processing when the OK button is clicked DD*/
-  const handleClickDecision = () => {
-    console.log('Confirm button pressed');
-    setIsDialogOpen(false);
-  };
 
+// handleClickDecision implementation
   const DialogActions = (
     <GeneralIconButton icon="register" id="save-button" onClick={handleClickDecision}>
       決定
diff --git a/src/stores/plan/careplan/kaigi/KaigiStore.ts b/src/stores/plan/careplan/kaigi/KaigiStore.ts
index 3854161..0cfd03e 100644
--- a/src/stores/plan/careplan/kaigi/KaigiStore.ts
+++ b/src/stores/plan/careplan/kaigi/KaigiStore.ts
@@ -1,8 +1,9 @@
 import { createSlice, PayloadAction } from '@reduxjs/toolkit';
-import { LabelAndValue, PlanServiseTantoushaKaigi, PlanRiyoushaKihon } from 'maps4nc-frontend-web-api/dist/lib/model';
+import { LabelAndValue, PlanServiseTantoushaKaigi, PlanRiyoushaKihon, PastShussekisha } from 'maps4nc-frontend-web-api/dist/lib/model';
 
 export type KaigiState = {
   planServiseTantoushaKaigi?: PlanServiseTantoushaKaigi;
+  pastShussekishaList?: PastShussekisha[];
   riyoushaKihon?: PlanRiyoushaKihon;
   youkaigodoList?: LabelAndValue[];
   loadingStatus: 'NotLoad' | 'Loading' | 'Loaded' | 'Error';
@@ -13,6 +14,7 @@ export type KaigiState = {
 
 const initialState = (): KaigiState => ({
   planServiseTantoushaKaigi: undefined,
+  pastShussekishaList: [],
   riyoushaKihon: undefined,
   youkaigodoList: [],
   loadingStatus: 'NotLoad',
@@ -47,6 +49,10 @@ const kaigiStore = createSlice({
       draftState.loadingStatus = 'Loaded';
       draftState.planServiseTantoushaKaigi = action.payload;
     },
+    fetchedPastShussekishaList: (draftState: KaigiState, action: PayloadAction<PastShussekisha[]>) => {
+      draftState.loadingStatus = 'Loaded';
+      draftState.pastShussekishaList = action.payload;
+    },
     fetchedRiyoushaKihon: (draftState: KaigiState, action: PayloadAction<PlanRiyoushaKihon>) => {
       draftState.loadingRiyoushaKihonStatus = 'Loaded';
       draftState.riyoushaKihon = action.payload;
