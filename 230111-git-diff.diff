diff --git a/src/containers/pages/Plan/Careplan/Kaigi/KaigiEditForm.tsx b/src/containers/pages/Plan/Careplan/Kaigi/KaigiEditForm.tsx
index 5aa9d8f..ddf3078 100644
--- a/src/containers/pages/Plan/Careplan/Kaigi/KaigiEditForm.tsx
+++ b/src/containers/pages/Plan/Careplan/Kaigi/KaigiEditForm.tsx
@@ -3,8 +3,6 @@ import { RootState, useTypedSelector } from '@my/stores';
 import screenIDs from '@my/screenIDs';
 import UseEffectAsync from '@my/utils/UseEffectAsync';
 import React from 'react';
-
-// import { PlanKeikakushoKanri, PlanKyotakuServiceKeikakusho1, PlanKyotakuServiceKeikakusho1RegisterData } from 'maps4nc-frontend-web-api/dist/lib/model';
 import { PlanKeikakushoKanri, PlanServiseTantoushaKaigi, CarePlanKaigiUpdateData } from 'maps4nc-frontend-web-api/dist/lib/model';
 
 import usePutKaigi from '@my/action-hooks/plan/careplan/kaigi/usePutKaigi';
@@ -27,7 +25,7 @@ const KaigiEditForm: React.FC<Props> = (props: Props) => {
 
   const fetchKaigi = useFetchKaigi(screenIDs.L1240_01.id); // GET 
   const putKaigi = usePutKaigi(screenIDs.L1240_01.id); // UPDATE = GET + PUT
-  const fetchPastShussikisha = useFetchPastShussikisha(screenIDs.L1240_01.id); // GET
+
 
   const clearCareplanHeader = useClearCareplanHeader();
   const clearKaigi = useClearKaigi();
@@ -83,8 +81,6 @@ const KaigiEditForm: React.FC<Props> = (props: Props) => {
 
   //
 
-//   PUT - request-body : CarePlanKaigiUpdateData = object(planKeikakushoKanri, planServiceTantoushaKaigi)
-
 // PUT - response-body: PlanSeriseTantousshaKaigiKey
 
   const riyoushaKihon = useTypedSelector((state: RootState) => state.kaigi.riyoushaKihon);
@@ -95,8 +91,9 @@ const KaigiEditForm: React.FC<Props> = (props: Props) => {
 
   const loadingStatus = useTypedSelector((state: RootState) => state.kaigi.loadingStatus);
 
-  // debug
+  
   const selectedPlanKeikakushoKanri = useTypedSelector((state: RootState) => state.careplanHeader.selectedPlanKeikakushoKanri);
+  // debug
   console.log('selectedPlanKeikakushoKanri: ', selectedPlanKeikakushoKanri);
   console.log(
     'RootState-careplanHeader: ',
@@ -105,20 +102,6 @@ const KaigiEditForm: React.FC<Props> = (props: Props) => {
 
   const notLoaded = loadingStatus !== 'Loaded';
 
-  // React.useEffect(
-  //   UseEffectAsync.make(async () => {
-  //     if (notLoaded) {
-  //       await fetchKaigi(
-  //         selectedPlanKeikakushoKanri?.info?.officeServiceKindSeq || 0,
-  //         selectedPlanKeikakushoKanri?.info?.riyoushaSeq || 0,
-  //         selectedPlanKeikakushoKanri?.info?.keikakushoShubetsu || '',
-  //         selectedPlanKeikakushoKanri?.info?.keikakushoSeq || 0
-  //       );
-  //     }
-  //   }),
-  //   [fetchKaigi, selectedPlanKeikakushoKanri, riyoushaSeq, notLoaded]
-  // );
-
   // Get key points
   React. useEffect(
     UseEffectAsync. make(async () => {
@@ -135,29 +118,40 @@ const KaigiEditForm: React.FC<Props> = (props: Props) => {
   );
 
 
-    // Get past shussikisha 
-    React. useEffect(
-      UseEffectAsync. make(async () => {
-        if (notLoaded) {
-          await fetchPastShussikisha(
-            selectedPlanKeikakushoKanri?.info?.riyoushaSeq || 0,
-          );
-        }
-      }),
-      [fetchPastShussikisha, selectedPlanKeikakushoKanri, riyoushaSeq, notLoaded]
-    );
+//   //TODO : add "kind" variable to kaigiStore , 
+//   // - then using useTypedSelector-hook to get this data, 
+//   // - and using an using action-hook to set this data, sync from RadioButtonField
+//   // - "kind" variable only have 2 values : 1 or 2; defualt is 1.
+//   // - if kind === 1 => do user things
+//   // - if kind === 2 => do staff things
+//   // - this "kind" variable later can pass from KaigiEditForm to KaigiInputForm to PastShessukisha through props
 
+const fetchPastShussikisha = useFetchPastShussikisha(screenIDs.L1240_01.id); // GET
 
-  // debug onSubmit simple function
-  // const onSubmit = async (data: KaigiInputFormType) => {
-  //     // eslint-disable-next-line no-console
-  //     console.log('onSubmit called');
-  //     console.log('data on KaigiEditForm -> ', data);
+// // mock:  set kind static-data for mocking data
+// // const kind = 1;
+
+//   // get kind dynamic-data from KaigiStore
+//   const kind = useTypedSelector(
+//     (state: RootState) => state.kaigi.kind
+//   );
+//   console.log("kind from KaigiEditForm.tsx :", kind)
+  
+  
+
+//     // Get past shussikisha 
+//     React. useEffect(
+//       UseEffectAsync. make(async () => {
+//         if (notLoaded) {
+//           await fetchPastShussikisha(
+//             selectedPlanKeikakushoKanri?.info?.riyoushaSeq || 0,
+//             kind
+//           );
+//         }
+//       }),
+//       [fetchPastShussikisha, selectedPlanKeikakushoKanri, riyoushaSeq, kind, notLoaded]
+//     );
 
-  //   // eslint-disable-next-line no-console
-  //   console.log('KaigiEditForm render 01');
-  //   console.log('onSubmit called after render 01');
-  // }
 
   // (編集用) 登録ボタン押下時
   const onSubmit = async (data: KaigiInputFormType) => {
@@ -444,7 +438,7 @@ const KaigiEditForm: React.FC<Props> = (props: Props) => {
   // eslint-disable-next-line no-console
   console.log('KaigiEditForm render 01');
 
-  return <KaigiInputForm id={`${id}-edit`} isReadonly={isReadonly} defaultValues={defaultValues} onSubmit={onSubmit} />;
+  return <KaigiInputForm id={`${id}-edit`} isReadonly={isReadonly} defaultValues={defaultValues} riyoushaSeq={riyoushaSeq} onSubmit={onSubmit} />;
 };
 
 export default KaigiEditForm;
diff --git a/src/containers/pages/Plan/Careplan/Kaigi/KaigiInputForm.tsx b/src/containers/pages/Plan/Careplan/Kaigi/KaigiInputForm.tsx
index fc47df8..51578fc 100644
--- a/src/containers/pages/Plan/Careplan/Kaigi/KaigiInputForm.tsx
+++ b/src/containers/pages/Plan/Careplan/Kaigi/KaigiInputForm.tsx
@@ -32,6 +32,7 @@ export type Props = {
   id: string;
   isReadonly: boolean;
   defaultValues?: KaigiInputFormType;
+  riyoushaSeq: number;
   onSubmit: (data: KaigiInputFormType) => Promise<void>;
 };
 
@@ -127,7 +128,16 @@ export const kaigiInputFormSchema = yup.object({
 // start of ShussekisaTable aka attendees-citation Table
 const shozokuNameColumns = [{ key: 'shozokuNameColumn1' }, { key: 'shozokuNameColumn2' }, { key: 'shozokuNameColumn3' }];
 const shozokuNameRows = [{ key: 'shozokuNameRow1' }, { key: 'shozokuNameRow2' }, { key: 'shozokuNameRow3' }];
-const ShussekishaTable: React.FC = () => {
+
+export type PropsShussekishaTable = {
+  riyoushaSeq: number;
+};
+
+const ShussekishaTable: React.FC<PropsShussekishaTable> = (props: PropsShussekishaTable) => {
+  // const KaigiInputForm: React.FC<Props> = (props: Props) => {
+  //   const { id, isReadonly, defaultValues, riyoushaSeq, onSubmit } = props;  
+  const { riyoushaSeq }  = props;
+
   const [isDialogOpen, setIsDialogOpen] = React.useState(false);
   // eslint-disable-next-line @typescript-eslint/no-unused-vars
   const handleClickShussekishaInyou = () => {
@@ -135,7 +145,7 @@ const ShussekishaTable: React.FC = () => {
   };
   return (
     <>
-      {isDialogOpen && <ShussekishaInyou setIsDialogOpen={setIsDialogOpen} />}
+      {isDialogOpen && <ShussekishaInyou setIsDialogOpen={setIsDialogOpen} riyoushaSeq={riyoushaSeq} />}
       <HeaderCell component="th" width="10%">
         会議出席者
         <br />
@@ -202,7 +212,7 @@ const ShussekishaTable: React.FC = () => {
  * L1240-01.居宅サービス計画書(1)
  */
 const KaigiInputForm: React.FC<Props> = (props: Props) => {
-  const { id, isReadonly, defaultValues, onSubmit } = props;
+  const { id, isReadonly, defaultValues, riyoushaSeq, onSubmit } = props;
 
   const clearApiMessage = useClearApiMessage();
 
@@ -242,6 +252,8 @@ const KaigiInputForm: React.FC<Props> = (props: Props) => {
 
 
   const handleSubmitForm = handleSubmit(async (data) => {
+    console.log('inside handleSubmitForm');
+    console.log('riyoushaSeq: ', riyoushaSeq);
     console.log('data form: ', data);
     clearApiMessage(screenIDs.L1240_01.id);
     //if (onSubmit){
@@ -295,7 +307,7 @@ const KaigiInputForm: React.FC<Props> = (props: Props) => {
             <TableBody>
               {/* １行目 */}
               <TableRow>
-                <ShussekishaTable />
+                <ShussekishaTable riyoushaSeq={riyoushaSeq}/>
               </TableRow>
               {/* 2行目 */}
               <TableRow>
diff --git a/src/containers/pages/Plan/Careplan/Kaigi/ShussekishaInyou/ShussekishaInyou.tsx b/src/containers/pages/Plan/Careplan/Kaigi/ShussekishaInyou/ShussekishaInyou.tsx
index d41e2ae..a5f672a 100644
--- a/src/containers/pages/Plan/Careplan/Kaigi/ShussekishaInyou/ShussekishaInyou.tsx
+++ b/src/containers/pages/Plan/Careplan/Kaigi/ShussekishaInyou/ShussekishaInyou.tsx
@@ -1,7 +1,7 @@
 import React, { useState } from 'react';
 import Dialog from '@my/components/atomic/Dialog';
 import Grid from '@material-ui/core/Grid';
-import { DataGrid, DataGridColumn, EditableGridData, useEditableDataGrid } from '@my/components/molecules/DataGrid';
+import { DataGrid, DataGridColumn, EditableGridData, useEditableDataGrid, toDataGridIndexNumberArray } from '@my/components/molecules/DataGrid';
 import { Button } from '@material-ui/core';
 import Label from '@my/components/atomic/Label';
 import RadioButton from '@my/components/atomic/RadioButton';
@@ -9,9 +9,29 @@ import GeneralIconButton from '@my/components/molecules/GeneralIconButton';
 import { TextColumnFilter } from '@my/components/molecules/DataGrid/filters';
 import { PastShussekisha } from 'maps4nc-frontend-web-api/dist/lib/model';
 import { RootState, useTypedSelector } from '@my/stores';
+import UseEffectAsync from '@my/utils/UseEffectAsync';
+import screenIDs from '@my/screenIDs';
+import useFetchPastShussikisha from '@my/action-hooks/plan/careplan/kaigi/useFetchPastShussikisha';
+import useSetKind from '@my/action-hooks/plan/careplan/kaigi/useSetKind';
+import { useDispatch } from 'react-redux';
+
+// const fetchPastShussikisha = useFetchPastShussikisha(screenIDs.L1240_01.id); // GET
+
+// // Get past shussikisha
+// React. useEffect(
+//   UseEffectAsync. make(async () => {
+//     if (notLoaded) {
+//       await fetchPastShussikisha(
+//         selectedPlanKeikakushoKanri?.info?.riyoushaSeq || 0,
+//       );
+//     }
+//   }),
+//   [fetchPastShussikisha, selectedPlanKeikakushoKanri, riyoushaSeq, notLoaded]
+// );
 
 type Props = {
   setIsDialogOpen: React.Dispatch<React.SetStateAction<boolean>>;
+  riyoushaSeq: number;
 };
 
 // export type GridColumnData = EditableGridData & {
@@ -19,27 +39,28 @@ type Props = {
 //   name: string;
 // };
 
-// define type of columns 
-export type GridColumnData = EditableGridData & PastShussekisha;
-
+// define type of columns
+// export type GridColumnData = EditableGridData & PastShussekisha;
+export type GridColumnData = EditableGridData & PastShussekisha & { dataId: string};
 
 const defaultSelectedRows = { '0': true };
 
-
 function setIsDialogOpen(arg0: boolean) {
   throw new Error('Function not implemented.');
 }
 
-
 const ShussekishaInyou: React.FC<Props> = (props: Props) => {
-  const { setIsDialogOpen } = props;
+  const { setIsDialogOpen, riyoushaSeq } = props;
+
+  
 
-  //TODO: using useTypedSelector to get data form RootState like in KaigiEditForm 
+
+  //TODO: using useTypedSelector to get data form RootState like in KaigiEditForm
 
   // const riyoushaKihon = useTypedSelector((state: RootState) => state.kaigi.riyoushaKihon);
 
   // const kaigiData = useTypedSelector((state: RootState) => state.kaigi.planServiseTantoushaKaigi);
-  
+
   // console.log('kaigiData form KaigiEditForm: ', kaigiData);
 
   // const loadingStatus = useTypedSelector((state: RootState) => state.kaigi.loadingStatus);
@@ -52,130 +73,129 @@ const ShussekishaInyou: React.FC<Props> = (props: Props) => {
   //   useTypedSelector((state: RootState) => state.careplanHeader)
   // );
 
-
-
   /** Processing when the close button is clicked DD*/
   const handleClickReturn = () => {
     console.log('close button pressed');
     setIsDialogOpen(false);
   };
 
-    /** Processing when the OK button is clicked DD*/
-    const handleClickDecision = () => {
-      console.log('Confirm button pressed');
-      setIsDialogOpen(false);
-    };
-
-  function handleClickMove() {
-    // const filteredRows = filterRows();
-    //const filteredRows: Array<{ occupation: string; familyName: string }> = filterRows();
-    // setLeftGrid((prevLeftGrid) => prevLeftGrid.filter((row) => !filteredRows.includes(row)));
-    // setRightGrid((prevRightGrid) => [
-    //   ...prevRightGrid,
-    //   ...filteredRows.map((row) => ({
-    //     occupation: row.occupation,
-    //     familyName: row.familyName,
-    //   })),
-    // ]);
-  }
 
-  // use useMemo to auto update GridData for both leftGrid and rightGrid : PastShussekisha
+  //## implement handleClickMove()
+  // const [selectedRows, setSelectedRows] = useState<{ [key: string]: boolean }>({});
 
-  //   const ikkatsuPrintList = useTypedSelector((state: RootState) => state.kaigoPrint.ikkatsuPrintList);
-
-  // const gridData: ColumnDataOffice[] = React.useMemo((): ColumnDataOffice[] => {
-  //   return ikkatsuPrintList.map((od) => {
-  //     return {
-  //       ...od,
-  //     };
+  // const handleRowSelection = (rowIds: string[]) => {
+  //   setSelectedRows(
+  //     rowIds.reduce((acc, rowId) => {
+  //       acc[rowId] = true;
+  //       return acc;
+  //     }, {})
+  //   );
+  // };
+  
+  // const getSelectedRows = (): GridColumnData[] | null => {
+  //   if (Object.keys(selectedRows).length === 0) {
+  //     return null;
+  //   }
+  //   return kakoShussekishaData.filter(row => selectedRows[row.seq]);
+  // };
+
+
+  // const handleClickMove = () => {
+  //   const selectedRows = getSelectedRows();
+  //   if (!selectedRows) {
+  //     return;
+  //   }
+  //   const rowsToAdd = selectedRows.filter(row => {
+  //     return !rightGridData.some(existingRow => existingRow.name === row.name);
   //   });
-  // }, [ikkatsuPrintList]);
-
-//   const pastShussekishaArray = useTypedSelector(
-//   //(state: RootState) => state.kaigi.planServiseTantoushaKaigi.*
-// );
+  //   setRightGridData(prevData => prevData.concat(rowsToAdd));
+  // };
 
-// export default (app: Express) => {
-//   // for Kagi GET - POST - PUT
-//   Routes.L124002CareplanKaigiUpdateRoute.getCareplanOfficeServiceKindSeqRiyoushaSeqKaigiKeikakushoShubetsuKeikakushoSeq(app, (res, params) => {
-//     res.json(sampleDataGet);
-//   });
-//   Routes.L124001CareplanKaigiRegisterRoute.postCareplanOfficeServiceKindSeqRiyoushaSeqKaigiKeikakushoShubetsu(app, (res, params) => {
-//     res.json(sampleDataPost);
-//   });
-//   Routes.L124002CareplanKaigiUpdateRoute.putCareplanOfficeServiceKindSeqRiyoushaSeqKaigiKeikakushoShubetsuKeikakushoSeq(app, (res, params) => {
-//     res.status(200).send();
-//   });
-//   // for PastShussekisha GET
-//   Routes.L124004CareplanKaigiPastShussekishaListRoute.getCareplanKaigiPastShussekishaKind(app, (res, params) => {
-//     res.json(sampleDataGetPastShussekisha);
-//   });
 
-// };
 
 
-//## kaigi Store-Slcie: [[KGFE-action-proc-insight - RootState - KaigiStore-json-data RootStore-Slice MOC]]
+//  const [selectedRows, setSelectedRows] = useState<{ [key: string]: boolean }>({});
+  // const handleRowSelection = (rowIds: string[]) => {
+  //   setSelectedRows(
+  //     rowIds.reduce((acc, rowId) => {
+  //       acc[rowId] = true;
+  //       return acc;
+  //     }, {})
+  //   );
+  // };
 
-  // kaigi: {
-  //   planServiseTantoushaKaigi: {
-  //     officeSeq: 1,
-  //     officeServiceKindSeq: 1,
-  //     riyoushaSeq: 1,
-  //     keikakushoShubetsu: 'keikakushoShubetsu',
-  //     keikakushoSeq: 1,
-  //     kaisaiDate: 1670544000000,
-  //     kaisaiBasho: 'kaisaiBasho',
-  //     kaisaiJikan: 'kaisaiJikan',
-  //     kaisaiKaisuu: 1,
-  //     shozoku1: 'shozoku1',
-  //     name1: 'name1',
-  //     shozoku2: 'shozoku2',
-  //     name2: 'name2',
-  //     shozoku3: 'shozoku3',
-  //     name3: 'name3',
-  //     shozoku4: 'shozoku4',
-  //     name4: 'name4',
-  //     shozoku5: 'shozoku5',
-  //     name5: 'name5',
-  //     shozoku6: 'shozoku6',
-  //     name6: 'name6',
-  //     shozoku7: 'shozoku7',
-  //     name7: 'name7',
-  //     shozoku8: 'shozoku8',
-  //     name8: 'name8',
-  //     shozoku9: 'shozoku9',
-  //     name9: 'name9',
-  //     shussekiHonnin: 'shussekiHonnin',
-  //     shussekiKazoku: 'shussekiKazoku',
-  //     shussekiTsuzukigara: 'shussekiTsuzukigara',
-  //     shussekiBikou: 'shussekiBikou',
-  //     kentouKoumoku: 'kentouKoumoku',
-  //     kentouNaiyou: 'kentouNaiyou',
-  //     ketsuron: 'ketsuron',
-  //     kadai: 'kadai',
-  //     updateAt: 1673141300389
-  //   },
-  //   youkaigodoList: [],
-  //   loadingStatus: 'Loaded',
-  //   loadingRiyoushaKihonStatus: 'NotLoad',
-  //   loadingYoukaigodoListStatus: 'NotLoad',
-  //   isDirty: false
-  // },
   
+  // const getSelectedRows = (): GridColumnData[] | null => {
+  //   if (Object.keys(selectedRows).length === 0) {
+  //     return null;
+  //   }
+  //   return kakoShussekishaData.filter(row => selectedRows[row.seq]);
+  // };
+
+
+// ## ------------------ data of both grids stuff -----
+
+
+
+//## for RadioInputField processing 
+
+ 
+  // define onClickXXX and handleClickXXX for RadioButton
+  // const onClickKettei = () => {
+  //   // When setting weekly or monthly frequency
+  //   if (hiundoRadio === 'hindo1') {
+  //     if (kaisuu.label && weeklyOrMonthly.label) {
+  //       handleClickKettei(`${kaisuu.label}/${weeklyOrMonthly.label}`);
+  //     }
+  //   }
+  //   // When setting daily or occasional
+  //   if (hiundoRadio === 'hindo2') {
+  //     if (everydayOrTekigi.label) {
+  //       handleClickKettei(everydayOrTekigi.label);
+  //     }
+  //   }
+  // };
+
+  //TODO: load kakoShussekishaKindRadioOptions from API-04
+  // define xxxRadioOptions
+  const kakoShussekishaKindRadioOptions = [
+    { id: 'kako-shussekisha-kind-riyousha', label: '選択利用者', value: '1' },
+    { id: 'kako-shussekisha-kind-staff', label: 'ログインスタッフ', value: '2' },
+  ];
+
+
+  // using useState to update radio-value
+  // have put this code above leftGrid data values for its default value base on this varible
+  const [kakoShussekishaKindRadio, setKakoShussekishaKindRadio] = useState('1');
+
+  /** Processing when the Decision button is clicked*/
+  const handleClickDecision = () => {
+    console.log('Decision button pressed');
+    console.log('kakoShussekishaKindRadioOptions: ', kakoShussekishaKindRadioOptions);
+    console.log('kakoShussekishaKindRadioOptions[0].value: ', kakoShussekishaKindRadioOptions[0].value);
+    console.log('kakoShussekishaKindRadioOptions[1].value: ', kakoShussekishaKindRadioOptions[1].value);
+    console.log('kakoShussekishaKindRadio: ', kakoShussekishaKindRadio);
+    console.log('kakoShussekishaKindRadio 2: ', kakoShussekishaKindRadio);
+    //console.log('which radio button checked?, debug before kakoShussekishaDataGridValues declaration: ', kakoShussekishaKindRadio); // not see effect => move to handleClickDecision
+    //
+    // Log the value of the selected radio button
+    console.log('Selected radio button value: ', kakoShussekishaKindRadio);
+
+    // Log the label of the selected radio button
+    const selectedRadio = kakoShussekishaKindRadioOptions.find((radio) => radio.value === kakoShussekishaKindRadio);
+    //console.log('Selected radio button label: ', selectedRadio.label);
+
+    // Log the status of all radio buttons
+    kakoShussekishaKindRadioOptions.forEach((radio) => {
+      console.log(`Radio button ${radio.label} is checked: ${radio.value === kakoShussekishaKindRadio}`);
+    });
+
+    //setIsDialogOpen(false);
+  };
 
 
-  // const gridData: GridColumnData[] = React.useMemo((): GridColumnData[] => {
-  //   return ikkatsuPrintList.map((od) => {
-  //     return {
-  //       ...od,
-  //     };
-  //   });
-  // }, [ikkatsuPrintList]);
-
-
-
+  // move data stuff of both grid above handleClickMove stuff
 
-  // 
   // for leftGrid: Columns vs Data vs Values
 
   const kakoShussekishaColumns: DataGridColumn<GridColumnData>[] = React.useMemo(
@@ -200,24 +220,244 @@ const ShussekishaInyou: React.FC<Props> = (props: Props) => {
     []
   );
 
-// ### using useState to prepare var-setVar-pairs for Data of both Grids : dynamically
-//const [kakoShussekishaData, setkakoShussekishaData] = React.useState<GridColumnData[]>();
+  // ### using useState to prepare var-setVar-pairs for Data of both Grids : dynamically
+  //const [kakoShussekishaData, setkakoShussekishaData] = React.useState<GridColumnData[]>();
+
+  // ### or useMemo to return pre-defined object : statically
+  // const kakoShussekishaData: GridColumnData[] = React.useMemo((): GridColumnData[] => {
+  //   return [
+  //     { shozoku: 'B訪問介護事業所', name: 'ヘルパー　太郎' },
+  //     { shozoku: 'C福祉用具貸与事業所', name: '福祉用具　二郎' },
+  //     { shozoku: 'A居宅介護支援事業所', name: 'ケアマネ　花子' },
+  //     { shozoku: 'X病院', name: '医師　進' },
+  //   ];
+  // }, []);
+
+
+
+
+  // let kakoShussekishaData: GridColumnData[] = React.useMemo((): GridColumnData[] => {
+  //   return [
+  //     {
+  //       "shozoku": "shozoku1",
+  //       "name": "name1"
+  //     },
+  //     {
+  //       "shozoku": "shozoku2",
+  //       "name": "name2"
+  //     },
+  //     {
+  //       "shozoku": "shozoku3",
+  //       "name": "name3"
+  //     },
+  //     {
+  //       "shozoku": "shozoku4",
+  //       "name": "name4"
+  //     },
+  //     {
+  //       "shozoku": "shozoku5",
+  //       "name": "name5"
+  //     },
+  //     {
+  //       "shozoku": "shozoku6",
+  //       "name": "name6"
+  //     },
+  //     {
+  //       "shozoku": "shozoku7",
+  //       "name": "name7"
+  //     },
+  //     {
+  //       "shozoku": "shozoku8",
+  //       "name": "name8"
+  //     },
+  //     {
+  //       "shozoku": "shozoku9",
+  //       "name": "name9"
+  //     }
+  //   ];
+  // }, []);
+
+  let kakoShussekishaData: GridColumnData[] = React.useMemo((): GridColumnData[] => {
+    return [
+      {
+        "dataId": "1",
+        "shozoku": "shozoku1",
+        "name": "name1"
+      },
+      {
+        "dataId": "2",
+        "shozoku": "shozoku2",
+        "name": "name2"
+      },
+      {
+        "dataId": "3",
+        "shozoku": "shozoku3",
+        "name": "name3"
+      },
+      {
+        "dataId": "4",
+        "shozoku": "shozoku4",
+        "name": "name4"
+      },
+      {
+        "dataId": "5",
+        "shozoku": "shozoku5",
+        "name": "name5"
+      },
+      {
+        "dataId": "6",
+        "shozoku": "shozoku6",
+        "name": "name6"
+      },
+      {
+        "dataId": "7",
+        "shozoku": "shozoku7",
+        "name": "name7"
+      },
+      {
+        "dataId": "8",
+        "shozoku": "shozoku8",
+        "name": "name8"
+      },
+      {
+        "dataId": "9",
+        "shozoku": "shozoku9",
+        "name": "name9"
+      },
+    ];
+}, []);
+
+  console.log('kakoShussekishaKindRadio 4: ', kakoShussekishaKindRadio);
+
 
-// ### or useMemo to return pre-defined object : statically
-const kakoShussekishaData: GridColumnData[] = React.useMemo((): GridColumnData[] => {
+  const kakoShussekishaDataSelectUser: GridColumnData[] = React.useMemo((): GridColumnData[] => {
     return [
-      { shozoku: 'B訪問介護事業所', name: 'ヘルパー　太郎' },
-      { shozoku: 'C福祉用具貸与事業所', name: '福祉用具　二郎' },
-      { shozoku: 'A居宅介護支援事業所', name: 'ケアマネ　花子' },
-      { shozoku: 'X病院', name: '医師　進' },
+      {
+        "dataId": "1",
+        "shozoku": "shozoku1SelectUser",
+        "name": "name1SelectUser"
+      },
+      {
+        "dataId": "2",
+        "shozoku": "shozoku2SelectUser",
+        "name": "name2SelectUser"
+      },
+      {
+        "dataId": "3",
+        "shozoku": "shozoku3SelectUser",
+        "name": "name3SelectUser"
+      },
+      {
+        "dataId": "4",
+        "shozoku": "shozoku4SelectUser",
+        "name": "name4SelectUser"
+      },
+      {
+        "dataId": "5",
+        "shozoku": "shozoku5SelectUser",
+        "name": "name5SelectUser"
+      },
+      {
+        "dataId": "6",
+        "shozoku": "shozoku6SelectUser",
+        "name": "name6SelectUser"
+      },
+      {
+        "dataId": "7",
+        "shozoku": "shozoku7SelectUser",
+        "name": "name7SelectUser"
+      },
+      {
+        "dataId": "8",
+        "shozoku": "shozoku8SelectUser",
+        "name": "name8SelectUser"
+      },
+      {
+        "dataId": "9",
+        "shozoku": "shozoku9SelectUser",
+        "name": "name9SelectUser"
+      },
+    ];
+  }, []);
+
+  
+
+  const kakoShussekishaDataLoginStaff: GridColumnData[] = React.useMemo((): GridColumnData[] => {
+    return [
+      {
+        "dataId": "1",
+        "shozoku": "shozoku1LoginStaff",
+        "name": "name1LoginStaff"
+      },
+      {
+        "dataId": "2",
+        "shozoku": "shozoku2LoginStaff",
+        "name": "name2LoginStaff"
+      },
+      {
+        "dataId": "3",
+        "shozoku": "shozoku3LoginStaff",
+        "name": "name3LoginStaff"
+      },
+      {
+        "dataId": "4",
+        "shozoku": "shozoku4LoginStaff",
+        "name": "name4LoginStaff"
+      },
+      {
+        "dataId": "5",
+        "shozoku": "shozoku5LoginStaff",
+        "name": "name5LoginStaff"
+      },
+      {
+        "dataId": "6",
+        "shozoku": "shozoku6LoginStaff",
+        "name": "name6LoginStaff"
+      },
+      {
+        "dataId": "7",
+        "shozoku": "shozoku7LoginStaff",
+        "name": "name7LoginStaff"
+      },
+      {
+        "dataId": "8",
+        "shozoku": "shozoku8LoginStaff",
+        "name": "name8LoginStaff"
+      },
+      {
+        "dataId": "9",
+        "shozoku": "shozoku9LoginStaff",
+        "name": "name9LoginStaff"
+      },
     ];
   }, []);
 
+
+// this assignment swith for defualt leftGrid based on RadioButton switch should in onChange handler of that Radio button  
+  if (Number(kakoShussekishaKindRadio) === 1) {
+    kakoShussekishaData = kakoShussekishaDataSelectUser;
+  } else {
+    kakoShussekishaData = kakoShussekishaDataLoginStaff;
+  }
+  
+console.log('kakoShussekishaData: ', kakoShussekishaData);
+
+  // console.log("which radio button checked?, debug before kakoShussekishaDataGridValues declaration: ", kakoShussekishaKindRadio); // not see effect => move to handleClickDecision
+  console.log('kakoShussekishaKindRadio 3: ', kakoShussekishaKindRadio);
+
   const kakoShussekishaDataGridValues = useEditableDataGrid<GridColumnData>({
     defaultData: kakoShussekishaData,
     rowSelect: 'multiple',
   });
 
+  const { selectedRows, onSelectedRowChange } = kakoShussekishaDataGridValues;
+  console.log('seletedRows in ShussekishaInyou: ', selectedRows);
+  //console.log('seletedRows in ShussekishaInyou: ', Object.keys(selectedRows));
+console.log('seletedRows-GridIndex using toDataGridIndexNumberArray in ShussekishaInyou: ', toDataGridIndexNumberArray(selectedRows));
+  //console.log('seletedRows.length in ShussekishaInyou: ', selectedRows.length);
+  // console.log('seletedRows.length in ShussekishaInyou: ', selectedRows.get(row.dataId));
+
+
 
   // for rightGrid: Columns vs Data vs Values
 
@@ -241,46 +481,444 @@ const kakoShussekishaData: GridColumnData[] = React.useMemo((): GridColumnData[]
     []
   );
 
+  // const inyouShussekishaData: GridColumnData[] = React.useMemo((): GridColumnData[] => {
+  //   return [
+  //     { shozoku: 'C福祉用具貸与事業所', name: '福祉用具　二郎' },
+  //     { shozoku: 'X病院', name: '医師　進' },
+  //     { shozoku: 'A居宅介護支援事業所', name: 'ケアマネ　花子' },
+  //   ];
+  // }, []);
 
   const inyouShussekishaData: GridColumnData[] = React.useMemo((): GridColumnData[] => {
     return [
-      { shozoku: 'C福祉用具貸与事業所', name: '福祉用具　二郎' },
-      { shozoku: 'X病院', name: '医師　進' },
-      { shozoku: 'A居宅介護支援事業所', name: 'ケアマネ　花子' },
+      {
+        "dataId": "1",
+        "shozoku": "shozoku1SelectUser",
+        "name": "name1SelectUser"
+      },
+      {
+        "dataId": "2",
+        "shozoku": "shozoku2SelectUser",
+        "name": "name2SelectUser"
+      },
+	  {
+        "dataId": "1",
+        "shozoku": "shozoku1LoginStaff",
+        "name": "name1LoginStaff"
+      },
+      {
+        "dataId": "2",
+        "shozoku": "shozoku2LoginStaff",
+        "name": "name2LoginStaff"
+      },
     ];
   }, []);
 
+
   const inyouShussekishaDataGridValues = useEditableDataGrid<GridColumnData>({
     defaultData: inyouShussekishaData,
     draggable: true,
   });
 
-//## handlers 
-//### 1.3 for rightGrid: handleClickDelete
+// ## ------------------ end of data of both grids stuff ----
+
+
+
+// ## -------------------
+
+  // 1. use useState to set a pair : selectedRows and setSelectedRows
+
+  //@@
+  // const [selectedRows, setSelectedRows] = useState<Map<string,boolean>>(new Map());
+  //@@
+  //const [kakoShussekishaDataLoginStaffData, setkakoShussekishaDataLoginStaffData] = useState(kakoShussekishaDataLoginStaff);
+
+  // 2. implement handleRowSelection
+  // loop through all rows => with each rowId return selectedRows.set(rowId, true)
+  // setSelectedRows(new Map(selectedRows))
+  
+  //@@
+  // const handleRowSelection = (rowIds: string[]) => {
+  //   rowIds.forEach(rowId => selectedRows.set(rowId, true));
+  //   setSelectedRows(new Map(selectedRows));
+  // };
+  //@@
+
+
+
+// const getSelectedRows = (): GridColumnData[] | null => {
+//   if (selectedRows.size === 0) {
+//     return null;
+//   }
+//   return kakoShussekishaData.filter(row => selectedRows.get(row.seq) === true);
+// };
+
+// 3. implement getSelectedRows 
+// if selectedRows is null => return null => do nothing 
+// else : leftGrid DataGrid:  kakoShussekishaData filter only row which have row._id true in selectedRows
+
+
+//@@ prepare dataId 
+
+// const gridData: pastShussikishaListGridDataType[] = React.useMemo((): pastShussikishaListGridDataType[] => {
+//   return pastShussikishaList.map((kakutei, index) => {
+//     return {
+//       dataId: `${index}`,
+//       ...kakutei,
+//     };
+//   });
+// }, [pastShussikishaList]);
+
+
+//@@ 
+
+// const getSelectedRows = (): GridColumnData[] | null => {
+//   if (selectedRows.size === 0) {
+//     return null;
+//   }
+//   return kakoShussekishaData.filter(row => selectedRows.get(row.dataId) === true);
+//   return null;
+// };
+
+// const handleRowSelection = (rowIds: string[]) => {
+//   rowIds.forEach(rowId => selectedRows.set(rowId, true));
+//   setSelectedRows(new Map(selectedRows));
+// };
+
+//@@@
+// const [selectedRowIds, setSelectedRowIds] = useState<string[]>([]);
+// const handleRowSelection = (rowIds: string[]) => {
+//   console.log("handleRowSelection called");
+//   setSelectedRowIds(rowIds);
+// };
+
+// const getSelectedRows = (): GridColumnData[] | null => {
+//   console.log("getSelectedRows called");
+//   if (selectedRowIds.length === 0) {
+//     return null;
+//   }
+//   return kakoShussekishaData.filter(row => selectedRowIds.includes(row.dataId));
+// };
+//@@@
+
+// 4. implement handleClickMove 
+// init selectedRows from getSelectedRows()
+// if nothing select => return 
+// rowsToAdd = selectedRows.filder(row => {
+//  turn !rightGridData.some( 
+    // existingRow => existingRow.name === row.name
+// );
+//});
+
+
+
+
+  // const handleClickMove = () => {
+  //   const selectedRows = getSelectedRows();
+  //   if (!selectedRows) {
+  //     return;
+  //   }
+  //   const rowsToAdd = selectedRows.filter(row => {
+  //     return !rightGridData.some(existingRow => existingRow.name === row.name);
+  //   });
+  //   setRightGridData(prevData => prevData.concat(rowsToAdd));
+  // };
+
+// ## -------------------------------------------
+
+//@@@
+
+// const getSelectedRows = (): GridColumnData[] | null => {
+//   // if (selectedRows.size === 0) {
+//   //   return null;
+//   // }
+//   // return kakoShussekishaData.filter(row => selectedRows.get(row.dataId) === true);
+//   // return null;
+// };
+
+
+  // const getSelectedRows = (): GridColumnData[] | null => {
+  //   if (Object.keys(selectedRows).length === 0) {
+  //     return null;
+  //   }
+  //   return kakoShussekishaData.filter(row => selectedRows[row.dataId]);
+  // };
+
+  
+  const getSelectedRows = (): GridColumnData[] | null => {
+    const selectedRowsKeysArray = toDataGridIndexNumberArray(selectedRows);
+    console.log('selectedRowsKeysArray : ',selectedRowsKeysArray);
+    if (selectedRowsKeysArray.length === 0) {
+      return null;
+    }
+    return kakoShussekishaData.filter(row => selectedRowsKeysArray[row.dataId]);
+  };
+  
+
+
+const handleClickMove = () => {
+   console.log("Move button is clicked");
+// not need custom function getSelectedRows() any more 
+//   const selectedRows = getSelectedRows();
+//   console.log("selectedRows: ", selectedRows);
+
+
+   if (!selectedRows) {
+     return;
+   }
+  //  const rowsToAdd = selectedRows.filter(row => {
+  //    return !kakoShussekishaDataLoginStaff.some(existingRow => existingRow.dataId === row.dataId);
+  //  });
+  //  setkakoShussekishaDataLoginStaffData((prevData: any[]) => prevData.concat(rowsToAdd));
+};
+//@@@
+
+
+
+  // function handleClickMove() {
+  //   // const filteredRows = filterRows();
+  //   //const filteredRows: Array<{ occupation: string; familyName: string }> = filterRows();
+  //   // setLeftGrid((prevLeftGrid) => prevLeftGrid.filter((row) => !filteredRows.includes(row)));
+  //   // setRightGrid((prevRightGrid) => [
+  //   //   ...prevRightGrid,
+  //   //   ...filteredRows.map((row) => ({
+  //   //     occupation: row.occupation,
+  //   //     familyName: row.familyName,
+  //   //   })),
+  //   // ]);
+  // }
+
+
+
+  // use useMemo to auto update GridData for both leftGrid and rightGrid : PastShussekisha
+
+  //   const ikkatsuPrintList = useTypedSelector((state: RootState) => state.kaigoPrint.ikkatsuPrintList);
+
+  // const gridData: ColumnDataOffice[] = React.useMemo((): ColumnDataOffice[] => {
+  //   return ikkatsuPrintList.map((od) => {
+  //     return {
+  //       ...od,
+  //     };
+  //   });
+  // }, [ikkatsuPrintList]);
+
+  //   const pastShussekishaArray = useTypedSelector(
+  //   //(state: RootState) => state.kaigi.planServiseTantoushaKaigi.*
+  // );
+
+  // export default (app: Express) => {
+  //   // for Kagi GET - POST - PUT
+  //   Routes.L124002CareplanKaigiUpdateRoute.getCareplanOfficeServiceKindSeqRiyoushaSeqKaigiKeikakushoShubetsuKeikakushoSeq(app, (res, params) => {
+  //     res.json(sampleDataGet);
+  //   });
+  //   Routes.L124001CareplanKaigiRegisterRoute.postCareplanOfficeServiceKindSeqRiyoushaSeqKaigiKeikakushoShubetsu(app, (res, params) => {
+  //     res.json(sampleDataPost);
+  //   });
+  //   Routes.L124002CareplanKaigiUpdateRoute.putCareplanOfficeServiceKindSeqRiyoushaSeqKaigiKeikakushoShubetsuKeikakushoSeq(app, (res, params) => {
+  //     res.status(200).send();
+  //   });
+  //   // for PastShussekisha GET
+  //   Routes.L124004CareplanKaigiPastShussekishaListRoute.getCareplanKaigiPastShussekishaKind(app, (res, params) => {
+  //     res.json(sampleDataGetPastShussekisha);
+  //   });
+
+  // };
+
+  //## kaigi Store-Slcie: [[KGFE-action-proc-insight - RootState - KaigiStore-json-data RootStore-Slice MOC]]
+
+  // kaigi: {
+  //   planServiseTantoushaKaigi: {
+  //     officeSeq: 1,
+  //     officeServiceKindSeq: 1,
+  //     riyoushaSeq: 1,
+  //     keikakushoShubetsu: 'keikakushoShubetsu',
+  //     keikakushoSeq: 1,
+  //     kaisaiDate: 1670544000000,
+  //     kaisaiBasho: 'kaisaiBasho',
+  //     kaisaiJikan: 'kaisaiJikan',
+  //     kaisaiKaisuu: 1,
+  //     shozoku1: 'shozoku1',
+  //     name1: 'name1',
+  //     shozoku2: 'shozoku2',
+  //     name2: 'name2',
+  //     shozoku3: 'shozoku3',
+  //     name3: 'name3',
+  //     shozoku4: 'shozoku4',
+  //     name4: 'name4',
+  //     shozoku5: 'shozoku5',
+  //     name5: 'name5',
+  //     shozoku6: 'shozoku6',
+  //     name6: 'name6',
+  //     shozoku7: 'shozoku7',
+  //     name7: 'name7',
+  //     shozoku8: 'shozoku8',
+  //     name8: 'name8',
+  //     shozoku9: 'shozoku9',
+  //     name9: 'name9',
+  //     shussekiHonnin: 'shussekiHonnin',
+  //     shussekiKazoku: 'shussekiKazoku',
+  //     shussekiTsuzukigara: 'shussekiTsuzukigara',
+  //     shussekiBikou: 'shussekiBikou',
+  //     kentouKoumoku: 'kentouKoumoku',
+  //     kentouNaiyou: 'kentouNaiyou',
+  //     ketsuron: 'ketsuron',
+  //     kadai: 'kadai',
+  //     updateAt: 1673141300389
+  //   },
+  //   youkaigodoList: [],
+  //   loadingStatus: 'Loaded',
+  //   loadingRiyoushaKihonStatus: 'NotLoad',
+  //   loadingYoukaigodoListStatus: 'NotLoad',
+  //   isDirty: false
+  // },
+
+  // const gridData: GridColumnData[] = React.useMemo((): GridColumnData[] => {
+  //   return ikkatsuPrintList.map((od) => {
+  //     return {
+  //       ...od,
+  //     };
+  //   });
+  // }, [ikkatsuPrintList]);
+
+  //
+
+  
+
+  //## handlers
+  //### 1.3 for rightGrid: handleClickDelete
   const { remove } = inyouShussekishaDataGridValues;
 
   const handleClickDelete = React.useCallback(
     (rowIndex: number) => {
       remove(rowIndex);
-      console.log("kakoShussekishaDataGridValues: ",kakoShussekishaDataGridValues);
-      console.log("inyouShussekishaDataGridValues: ",inyouShussekishaDataGridValues);
-      console.log("kakoShussekishaData: ",kakoShussekishaData);
-      console.log("inyouShussekishaData: ",inyouShussekishaData);
+      console.log('kakoShussekishaDataGridValues: ', kakoShussekishaDataGridValues);
+      console.log('inyouShussekishaDataGridValues: ', inyouShussekishaDataGridValues);
+      console.log('kakoShussekishaData: ', kakoShussekishaData);
+      console.log('inyouShussekishaData: ', inyouShussekishaData);
     },
     [remove]
   );
 
+ 
+  // handleClickDecision implementation
+  const DialogActions = (
+    <GeneralIconButton icon="register" id="save-button" onClick={handleClickDecision}>
+      決定
+    </GeneralIconButton>
+  );
 
+//--
+  //TODO : add "kind" variable to kaigiStore , 
+  // - then using useTypedSelector-hook to get this data, 
+  // - and using an using action-hook to set this data, sync from RadioButtonField
+  // - "kind" variable only have 2 values : 1 or 2; defualt is 1.
+  // - if kind === 1 => do user things
+  // - if kind === 2 => do staff things
+  // - this "kind" variable later can pass from KaigiEditForm to KaigiInputForm to PastShessukisha through props
+
+// const fetchPastShussikisha = useFetchPastShussikisha(screenIDs.L1240_01.id); // GET
+
+// // Get past shussikisha
+// React. useEffect(
+//   UseEffectAsync. make(async () => {
+//     if (notLoaded) {
+//       await fetchPastShussikisha(
+//         selectedPlanKeikakushoKanri?.info?.riyoushaSeq || 0,
+//       );
+//     }
+//   }),
+//   [fetchPastShussikisha, selectedPlanKeikakushoKanri, riyoushaSeq, notLoaded]
+// );
 
 
+const fetchPastShussikisha = useFetchPastShussikisha(screenIDs.L1240_01.id); // GET
+const selectedPlanKeikakushoKanri = useTypedSelector((state: RootState) => state.careplanHeader.selectedPlanKeikakushoKanri);
 
+// fixed notLoaded not defined : from KaigiEditForm
+  const loadingPastShussikishaStatus = useTypedSelector((state: RootState) => state.kaigi.loadingShusseskishaListStatus);
+  const notLoadedPastShussikishaList = loadingPastShussikishaStatus !== 'Loaded';
 
-// handleClickDecision implementation
-  const DialogActions = (
-    <GeneralIconButton icon="register" id="save-button" onClick={handleClickDecision}>
-      決定
-    </GeneralIconButton>
+// mock:  set kind static-data for mocking data
+// const kind = 1;
+
+  // get kind dynamic-data from KaigiStore
+  const kind = useTypedSelector(
+    (state: RootState) => state.kaigi.kind
   );
+  console.log("kind from KaigiEditForm.tsx :", kind)
+  
+  
+
+    // Get past shussikisha 
+    React. useEffect(
+      UseEffectAsync. make(async () => {
+        if (notLoadedPastShussikishaList) {
+          await fetchPastShussikisha(
+            selectedPlanKeikakushoKanri?.info?.riyoushaSeq || 0,
+            kind
+          );
+        }
+      }),
+      [fetchPastShussikisha, selectedPlanKeikakushoKanri, riyoushaSeq, kind, notLoadedPastShussikishaList]
+    );
+
+
+//debug 
+console.log("kind data from ShussekishaInyou: ", kind);
+console.log("riyoushaSeq data from ShussekishaInyou: ", riyoushaSeq);
+
+  //---
+
+
+
+  //  // Get key points
+  //  React. useEffect(
+  //   UseEffectAsync. make(async () => {
+  //     if (notLoaded) {
+  //       await useFetchPastShussikisha(
+  //         // selectedPlanKeikakushoKanri?.info?.riyoushaSeq || 0,
+  //         // kind
+  //       );
+  //     }
+  //   }),
+  //   [fetchKaigi, selectedPlanKeikakushoKanri, riyoushaSeq, notLoaded]
+  // );
+
+// const putKaigi = usePutKaigi(screenIDs.L1240_01.id); // UPDATE = GET + PUT
+    
+//     // await putKaigi(officeServiceKindSeq, riyoushaSeq, keikakushoShubetsu, keikakushoSeq, registerData);
+//     await putKaigi(officeServiceKindSeq, riyoushaSeq, keikakushoShubetsu, keikakushoSeq, registerData);
+
+
+//## TODO use action-hook to set kind value in Kaigi store 
+// - [x] 1, write aciton-hook : useSetKind
+// - 2, using action-hook in hear
+
+
+//const dispatch = useDispatch();
+//setKind(10);
+//dispatch(setKind(10));
+// fetchedPastShussekishaList
+// SetKind: (draftState: KaigiState, action: PayloadAction<number>) => {
+//   draftState.loadingStatus = 'Loaded';
+//   draftState.kind = action.payload;
+// },
+// dispatch(SetKind(action.payload));
+
+// const setKind = useSetKind(kind);
+// // setKind(10);
+// console.log("setKind: ", setKind);
+
+
+const setKind = useSetKind(10);
+// setKind(10);
+//setKind;
+console.log("setKind: ", setKind); // why undefined? because this is a return of useSetKind(10) is void => not a value
+
+
+
+
+
 
   return (
     <Dialog open variant="simple" title="出席者引用" onClickReturn={handleClickReturn} fullWidth maxWidth="lg" actions={DialogActions}>
@@ -290,10 +928,9 @@ const kakoShussekishaData: GridColumnData[] = React.useMemo((): GridColumnData[]
           <RadioButton
             id="kako-shussekisha-kind"
             name="kakoShussekishaKind"
-            radios={[
-              { id: 'kako-shussekisha-kind-riyousha', label: '選択利用者', value: '1' },
-              { id: 'kako-shussekisha-kind-staff', label: 'ログインスタッフ', value: '2' },
-            ]}
+            value={kakoShussekishaKindRadio}
+            radios={kakoShussekishaKindRadioOptions}
+            onChange={(value) => setKakoShussekishaKindRadio(value)}
             defaultValue="1"
           />
         </Grid>
